import static org.junit.Assert.*;

import java.io.FileInputStream;
import java.io.IOException;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import org.junit.*;

import antlrstuff.Java8Lexer;
import antlrstuff.Java8Listener;
import antlrstuff.Java8Parser;

//Teaching Team tests the participants' implementation and the participants' tests
public class AntlrMain {
	
	Java8Listener jbl = new Java8Rules();
	
	//the participants' implementation can be accessed in a regular way as it has to implement our interface
	MyClassUnderTest mcut;
	//the participants' Tests are accessed via Reflection to allow more freedom
	Class<?> c;
	Object t;
	
	private static ANTLRInputStream input;
	private static Java8Lexer lexer;
	private static CommonTokenStream tokens;
	private static Java8Parser parser;
	private static ParseTree tree;
	private static ParseTreeWalker walker;
	
	// This class parses the submitted source code located at <AbsolutePathToSubjectFileToTest>
	@BeforeClass
	public static void setupClass() {
		
		try {
			input = new ANTLRInputStream(new FileInputStream("<AbsolutePathToSubjectFileToTest>"));
			lexer = new Java8Lexer(input);
			tokens = new CommonTokenStream(lexer);
			parser = new Java8Parser(tokens);
			tree = parser.compilationUnit();
			walker = new ParseTreeWalker();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	}

	// This iterates through the Parse Tree of the submitted code
	@Test
	public void testTheirImplementation() {
		walker.walk(jbl, tree);
		
		// see example for further details
	}
}
